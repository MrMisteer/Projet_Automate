import matplotlib.pyplot as plt
import networkx as nx
import random

def afficher_automate(filename):
    # Lecture du fichier
    with open(filename, 'r') as file:
        alphabet_size = int(file.readline().strip())
        num_states = int(file.readline().strip())
        init_states_count, init_states = map(int, file.readline().strip().split())
        terminal_states_count, terminal_states = map(int, file.readline().strip().split())
        num_transitions = int(file.readline().strip())
        transitions = [file.readline().strip() for _ in range(num_transitions)]

    # Initialisation du graphe dirigé
    G = nx.DiGraph()

    # Ajout des états
    for state in range(num_states):
        G.add_node(state)

    # Ajout des transitions
    transition_dict = {}
    for transition in transitions:
        start_state, symbol, end_state = int(transition[0]), transition[1], int(transition[2])
        if (start_state, end_state) in transition_dict:
            transition_dict[(start_state, end_state)].append(symbol)
        else:
            transition_dict[(start_state, end_state)] = [symbol]

    for (start_state, end_state), symbols in transition_dict.items():
        G.add_edge(start_state, end_state, label=symbols)

    # Positionnement des états dans le graphe
    pos = positionnement_noeuds(G)

    # Affichage des états
    nx.draw_networkx_nodes(G, pos, node_size=700)
    nx.draw_networkx_labels(G, pos)

    # Dessin des flèches pour représenter les transitions
    nx.draw_networkx_edges(G, pos, arrowsize=20, connectionstyle="arc3,rad=.1", width=1.5, edge_color='black')

    # Dessin des flèches d'entrée en rouge
    for state in [init_states]:
        pos_label = pos[state]
        plt.annotate('', xy=(pos_label[0], pos_label[1] - 0.05), xytext=(pos_label[0], pos_label[1] - 0.15),
                     arrowprops=dict(facecolor='red', shrink=0.05), fontsize=12, ha='center')
        plt.text(pos_label[0], pos_label[1] - 0.2, 'start', fontsize=12, ha='center', color='red')

    # Dessin des flèches de sortie en rouge
    for state in [terminal_states]:
        pos_label = pos[state]
        plt.annotate('', xy=(pos_label[0], pos_label[1] + 0.05), xytext=(pos_label[0], pos_label[1] + 0.15),
                     arrowprops=dict(facecolor='red', shrink=0.05), fontsize=12, ha='center')
        plt.text(pos_label[0], pos_label[1] + 0.2, 'end', fontsize=12, ha='center', color='red')

    # Ajout des étiquettes des transitions au-dessus de la flèche
    for edge in G.edges(data=True):
        start_state, end_state, label = edge
        symbols = label['label']
        symbols_text = ', '.join(symbols)
        midpoint_x = (pos[start_state][0] + pos[end_state][0]) / 2
        midpoint_y = (pos[start_state][1] + pos[end_state][1]) / 2
        plt.text(midpoint_x, midpoint_y + 0.1, symbols_text, fontsize=10, ha='center')

    # Affichage du graphe
    plt.title('Automate Fini')
    plt.axis('off')
    plt.show()

def positionnement_noeuds(graph):
    num_nodes = len(graph.nodes)
    if 1 <= num_nodes <= 8:
        # Positionnement en cercle pour 1 à 8 nœuds
        return nx.circular_layout(graph)
    else:
        # Positionnement aléatoire pour plus de 8 nœuds
        return {node: (random.random(), random.random()) for node in graph.nodes}


filename = 'automate.txt'  # Importation du fichier texte
afficher_automate(filename)
